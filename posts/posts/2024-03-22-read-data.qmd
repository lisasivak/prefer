---
title: "Reading in data"
description: |
  Here is some useful information on reading in / load PreFer data.   
categories:
  - dataset
  - guide
author: 
  - "Gert Stulp"
  - "Lisa Sivak"
date: '2024-03-22'
toc: true
image: ../../images/liss_pick.png
image-alt: LISS logo. 
language: 
    section-title-footnotes: References
---


Here we describe ways of reading-in the data for both Python and R. 

# Reading in the data

The most important dataset of the PreFer data challenge is the `PreFer_train_data.csv` dataset ([clic here] for information on the datasets that are available). This contains data on all LISS respondents who were between the ages of 18 and 45 in 2020 (i.e., had birthyears between 1975 and 2002). We will see how we can read-in this data with the help of R or Python. 


## R

There are several ways in which one could read data into R, but some of them are more successful and quicker than others (TL;DR: use `data.table::fread`. The below code assumes that you have the data `PreFer_train_data.csv` in your working directory.   

### read.csv
`read.csv` works, requires no additional packages, but is *very* slow. 
```{r eval = FALSE}
data <- read.csv("PreFer_train_data.csv", row.names = FALSE) # this works but is very slow
```

### read_csv
`readr::read_csv` from the package `readr` in principle works, but gets many of the column types wrong with default settings (because, by default, it only bases column types on the first 1000 values present in the variable). Do not run this code `data <- readr::read_csv("PreFer_train_data.csv")`, but use the following code which explicitly tells `read_csv` that it must make use of the entire column (i.e., all cases) to make a guess of the column type:

CHECK THESE NUMBER OF ROWS

```{r eval = FALSE}
library(readr) # requires install.packages("readr") first
data <- readr::read_csv("PreFer_train_data.csv", guess_max = 10307) # this works but is slow
# 13707 is the number of rows in the data
```

### fread
`data.table::fread` from the package `data.table` works like a charm and is very fast. Some additional arguments are useful to avoid default behaviour. 

```{r eval = FALSE}
library(data.table) # requires install.packages("data.table") first
data <- data.table::fread("PreFer_train_data.csv", 
                          keepLeadingZeros = TRUE, # if FALSE adds zeroes to some dates
                          data.table = FALSE) # returns a data.frame object rather than data.table 
```


## Python

LISA COULD YOU ADD THIS? 

